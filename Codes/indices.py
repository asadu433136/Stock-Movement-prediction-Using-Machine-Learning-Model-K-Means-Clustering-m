# -*- coding: utf-8 -*-
"""Indices.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IkPW0f9lEkhoIQyhu2WdM0gPTND_g0m5
"""

#Import Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as web
import datetime
from sklearn.cluster import KMeans
import matplotlib.cm as cm
from sklearn.metrics import silhouette_score
from yellowbrick.cluster import SilhouetteVisualizer
from sklearn.pipeline import make_pipeline

#import Companies name with tickers
companies_dict = {'Dow Jones Industrial Average':'^DJI',
    'ESTX 50 PR.EUR':'^STOXX50E',
    'MSCI AC Asia Pacific ex japan':'AAXJ'}

#Get the Dataset from Yahoo
data_source = 'yahoo' # Source of data is yahoo finance.
start_date = '01-01-2016' 
end_date = '31-12-2020'
df = web.DataReader(list(companies_dict.values()),data_source,start_date,end_date)
df.mean()
df = df.fillna(df.mean())
df.tail()

#identifying that is there any null value in dataset.
df.isnull().values.any()

#takes a variable (X) with open and close
X=df[['Open','Close']]
X

#numpy array of transpose of df
stock_open = np.array(df['Open']).T# stock_open is numpy array of transpose of df['Open']
stock_close = np.array(df['Close']).T# stock_close is numpy array of transpose of df

#Movement
movements = stock_close-stock_open
movements

#Plot the chart of Movement
plt.figure(figsize = (20,8)) 
ax1 = plt.subplot(2,3,1)
plt.title('^DJI',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[0]) 
plt.subplot(2,3,2,sharey = ax1)
plt.title('^STOXX50E',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[1]) 
plt.subplot(2,3,3,sharey = ax1)
plt.title('AAXJ',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[2])

#Calculate sum of movement
sum_of_movement = np.sum(movements,1)

#Print the Changes of three companies
for i in range(len(companies_dict)):
 print('company:{}, Change:{}'.format(df['Open'].columns[i],sum_of_movement[i]))

#plot open and close column
plt.figure(figsize = (40,20)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:^DJI',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['^DJI'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['^DJI'],color='blue',label = 'Close') # Closing prices are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})
ax1 = plt.subplot(2,3,2)
plt.title('Company:^STOXX50E',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['^STOXX50E'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['^STOXX50E'],color='blue',label = 'Close') # Closing prices are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})
ax1 = plt.subplot(2,3,3)
plt.title('Company:AAXJ',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['AAXJ'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['AAXJ'],color='blue',label = 'Close') # Closing prices are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})

#normalizer
from sklearn.preprocessing import Normalizer
normalizer = Normalizer() # Define a Normalizer
norm_movements = normalizer.fit_transform(X) # Fit and transform

#Print Normalizer range and mean values
print(norm_movements.min())
print(norm_movements.max())
print(norm_movements.mean())

#Plot the chart of Movement after normalize.
plt.figure(figsize = (20,8)) 
ax1 = plt.subplot(2,3,1)
plt.title('^DJI',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(norm_movements [0]) 
plt.subplot(2,3,2,sharey = ax1)
plt.title('^STOXX50E',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(norm_movements [1]) 
plt.subplot(2,3,3,sharey = ax1)
plt.title('AAXJ',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(norm_movements [2])

#Create KMeans algorithm 
model= KMeans(init = "k-means++", n_clusters = 2, n_init = 12,max_iter=1000)
model.fit(norm_movements)

sse = {}
for k in range(1, 10):
    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(norm_movements)
    df["clusters"] = kmeans.labels_
    #print(data["clusters"])
    sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center
plt.figure()
plt.plot(list(sse.keys()), list(sse.values()))
plt.xlabel("Number of cluster")
plt.ylabel("SSE")
plt.title('ELBOW Method')
plt.show()

#Create position in dataframe and predict the normalize movements
df['pos_clus'] = model.predict(norm_movements)

#searching in position which point have 1 and -1
df['pos_clus'] = np.where(df['pos_clus'] == 1,-1, 1)

#show the position values
df['pos_clus'].values

#Plotting the cluster
plt.figure(figsize=(10, 6))
plt.scatter(norm_movements[:, 0], norm_movements[:,3],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,0], model.cluster_centers_[:, 3], s = 200, c = 'orange', label = 'Centroids')
plt.title('^DJI')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(norm_movements[:, 1],norm_movements[:, 4],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,1], model.cluster_centers_[:, 4], s = 200, c = 'orange', label = 'Centroids')
plt.title('^STOXX50E')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(norm_movements[:, 2],norm_movements[:, 5],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,2], model.cluster_centers_[:, 5], s = 200, c = 'orange', label = 'Centroids')
plt.title('AAXJ')
plt.legend()
plt.show()

#Apply silhouette scoring method for cluster valuation
kmeans_silhouette = silhouette_score(norm_movements, model.labels_).round(2)

kmeans_silhouette

#plot silhouette score
fig, ax = plt.subplots(1, figsize=(15,8))
for i in [2, 3, 4]:
    kmeans = KMeans(n_clusters=2, init='k-means++', random_state=0)
    kmeans_silhouette
    visualizer = SilhouetteVisualizer(kmeans, colors='yellowbrick')
    visualizer.fit(norm_movements)

#Without trading initialize Backtesiting trading strategy
Y= df['Adj Close']
Y.head()

df1=Y.shift(1)
df1.dropna

#without Trading Cost Return
df['returns_^DJI']= np.log(Y['^DJI']/df1['^DJI'])
df['returns_^STOXX50E']= np.log(Y['^STOXX50E']/df1['^STOXX50E'])
df['returns_AAXJ']= np.log(Y['AAXJ']/df1['AAXJ'])
df.head()

#Indices DJI
np.sign(df['returns_^DJI']).head()

df['returns_^DJI']= df['returns_^DJI'].fillna(0)
df['returns_^DJI']

df['direction_^DJI'] = np.sign(df['returns_^DJI']).astype(int)
df['direction_^DJI']

df['strat_clus_^DJI'] = df['pos_clus'] * df['returns_^DJI']
df[['returns_^DJI', 'strat_clus_^DJI']].sum().apply(np.exp)

(df['direction_^DJI'] == df['pos_clus']).value_counts()

#Company 
np.sign(df['returns_^STOXX50E']).head()

df['returns_^STOXX50E']= df['returns_^STOXX50E'].fillna(0)
df['returns_^STOXX50E']

df['direction_^STOXX50E'] = np.sign(df['returns_^STOXX50E']).astype(int)
df['direction_^STOXX50E']

df['strat_clus_^STOXX50E'] = df['pos_clus'] * df['returns_^STOXX50E']
df[['returns_^STOXX50E', 'strat_clus_^STOXX50E']].sum().apply(np.exp)

(df['direction_^STOXX50E'] == df['pos_clus']).value_counts()

#Indicies AAXJ
np.sign(df['returns_AAXJ']).head()

df['returns_AAXJ']= df['returns_AAXJ'].fillna(0)
df['returns_AAXJ']

df['direction_AAXJ'] = np.sign(df['returns_AAXJ']).astype(int)
df['direction_AAXJ']

df['strat_clus_AAXJ'] = df['pos_clus'] * df['returns_AAXJ']
df[['returns_AAXJ', 'strat_clus_AAXJ']].sum().apply(np.exp)

(df['direction_AAXJ'] == df['pos_clus']).value_counts()

#Plot the chart without trading cost performence
plt.figure(figsize = (30,15)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:^DJI',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().iloc[0:]['returns_^DJI'], color='red',label= 'return') 
plt.plot(df.cumsum().iloc[0:]['strat_clus_^DJI'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.title('Company:^STOXX50E',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().iloc[0:]['returns_^STOXX50E'],color='red',label= 'return')
plt.plot(df.cumsum().iloc[0:]['strat_clus_^STOXX50E'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,3)
plt.title('Company:AAXJ',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().iloc[0:]['returns_AAXJ'],color='red',label= 'return')
plt.plot(df.cumsum().iloc[0:]['strat_clus_AAXJ'],color='blue',label= 'strat_clus') 
plt.legend()

#with trading cost
#with trading cost
Z= df['Adj Close'] +100
Z

df2=Z.shift(1)
df2.dropna

#with Trading Cost Return
df['returns_^DJI_T']= np.log(Z['^DJI']/df2['^DJI'])
df['returns_^STOXX50E_T']= np.log(Z['^STOXX50E']/df2['^STOXX50E'])
df['returns_AAXJ_T']= np.log(Z['AAXJ']/df2['AAXJ'])
df.head()

#Comapany ^DJI with trading Cost
np.sign(df['returns_^DJI_T']).head()

df['returns_^DJI_T']= df['returns_^DJI_T'].fillna(0)
df['returns_^DJI_T']

df['direction_^DJI_T'] = np.sign(df['returns_^DJI_T']).astype(int)
df['direction_^DJI_T']

df['strat_clus_^DJI_T'] = df['pos_clus'] * df['returns_^DJI_T']
df[['returns_^DJI_T', 'strat_clus_^DJI_T']].sum().apply(np.exp)

(df['direction_^DJI_T'] == df['pos_clus']).value_counts()

#Indicies ^STOXX50E with trading cost
np.sign(df['returns_^STOXX50E_T']).head()

df['returns_^STOXX50E_T']= df['returns_^STOXX50E_T'].fillna(0)
df['returns_^STOXX50E_T']

df['direction_^STOXX50E_T'] = np.sign(df['returns_^STOXX50E_T']).astype(int)
df['direction_^STOXX50E_T']

df['strat_clus_^STOXX50E_T'] = df['pos_clus'] * df['returns_^STOXX50E_T']
df[['returns_^STOXX50E_T', 'strat_clus_^STOXX50E_T']].sum().apply(np.exp)

(df['direction_^STOXX50E_T'] == df['pos_clus']).value_counts()

#Indicies AAXJ With Trading 
np.sign(df['returns_AAXJ_T']).head()

df['returns_AAXJ_T']= df['returns_AAXJ_T'].fillna(0)
df['returns_AAXJ_T']

df['direction_AAXJ_T'] = np.sign(df['returns_AAXJ_T']).astype(int)
df['direction_AAXJ_T']

df['strat_clus_AAXJ_T'] = df['pos_clus'] * df['returns_AAXJ_T']
df[['returns_AAXJ_T', 'strat_clus_AAXJ_T']].sum().apply(np.exp)

(df['direction_AAXJ_T'] == df['pos_clus']).value_counts()

#Plot the chart with trading cost performence
plt.figure(figsize = (30,15)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:^DJI_Trading',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().iloc[0:]['returns_^DJI_T'], color='red',label= 'return') 
plt.plot(df.cumsum().iloc[0:]['strat_clus_^DJI_T'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.title('Company:^STOXX50E_Trading',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().iloc[0:]['returns_^STOXX50E_T'],color='red',label= 'return')
plt.plot(df.cumsum().iloc[0:]['strat_clus_^STOXX50E_T'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,3)
plt.title('Company:AAXJ_Trading',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().iloc[0:]['returns_AAXJ_T'],color='red',label= 'return')
plt.plot(df.cumsum().iloc[0:]['strat_clus_AAXJ_T'],color='blue',label= 'strat_clus') 
plt.legend()

