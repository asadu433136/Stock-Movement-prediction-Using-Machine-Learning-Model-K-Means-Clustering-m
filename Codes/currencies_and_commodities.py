# -*- coding: utf-8 -*-
"""Currencies and Commodities.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iE0jq4LbhDQBGESb6SBfWEwjxdmfaLhr
"""

#Import Library
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt
import pandas_datareader as web
from sklearn.cluster import KMeans
import matplotlib.cm as cm
from sklearn.metrics import silhouette_score
from yellowbrick.cluster import SilhouetteVisualizer
from sklearn.metrics import adjusted_rand_score
from sklearn.pipeline import make_pipeline

#import Companies name with tickers
companies_dict = {'Crude Oil Mar':'CL=F',
    'Gold Apr':'GC=F'}

#Get the Dataset from Yahoo
data_source = 'yahoo' # Source of data is yahoo finance.
startdate = '2016' 
enddate = '2021'
df = web.DataReader(list(companies_dict.values()),
 data_source,startdate,enddate)
df.mean()
df = df.fillna(df.mean())
df

#identifying that is there any null value in dataset.
df.isnull().values.any()

#takes a variable (X) with open and close 
X=df[['Open','Close']]
X

#numpy array of transpose of df
stock_open = np.array(df['Open']).T# stock_open is numpy array of transpose of df['Open']
stock_close = np.array(df['Close']).T # stock_close is numpy array of transpose of df['Close']

#Movement
movements = stock_close-stock_open
movements.shape

#Plot the chart of Movement
plt.figure(figsize = (20,8)) 
ax1 = plt.subplot(2,3,1)
plt.title('CL=F',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[0]) 
plt.subplot(2,3,2,sharey = ax1)
plt.title('GC=F',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[1])

#Calculate sum of movement
sum_of_movement = np.sum(movements,1)

#Print the Changes of three companies
for i in range(len(companies_dict)):
 print('company:{}, Change:{}'.format(df['Open'].columns[i],sum_of_movement[i]))

#plot open and close column
plt.figure(figsize = (40,20)) # Adjusting figure size

ax1 = plt.subplot(2,3,1)
plt.title('Company:CL=F',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['CL=F'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['CL=F'],color='blue',label = 'Close') # Closing prices are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})
ax1 = plt.subplot(2,3,2)
plt.title('Company:GC=F',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['GC=F'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['GC=F'],color='blue',label = 'Close') # Closing prices  are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})

#normalizer
from sklearn.preprocessing import Normalizer
normalizer = Normalizer() # Define a Normalizer
norm_movements = normalizer.fit_transform(X) # Fit and transform

#Print Normalizer range and mean values
print(norm_movements.min())
print(norm_movements.max())
print(norm_movements.mean())

#Plot the chart of Movement after normalize.
plt.figure(figsize = (20,8)) 
ax1 = plt.subplot(2,3,1)
plt.title('CL=F',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(norm_movements [0]) 
plt.subplot(2,3,2,sharey = ax1)
plt.title('GC=F',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(norm_movements [1])

# Define a normalizer
normalizer = Normalizer()
# Create Kmeans model
kmeans = KMeans(n_clusters = 2,max_iter = 1000)
# Make a pipeline chaining normalizer and kmeans
pipeline = make_pipeline(normalizer,kmeans)
# Fit pipeline to daily stock movements
pipeline.fit(movements)
labels = pipeline.predict(movements)

#Check the labels 
Labels_= pd.DataFrame({'labels':labels,'companies':list(companies_dict)}).sort_values(by=['labels'],axis = 0)
Labels_

#Create KMeans algorithm 
model= KMeans(init = "k-means++", n_clusters = 2, n_init = 100,max_iter=1000)
model.fit(norm_movements)

#Create position in dataframe and predict the normalize movements
df['pos_clus'] = model.predict(norm_movements)

#searching in position which point have 1 and -1
df['pos_clus'] = np.where(df['pos_clus'] == 1,-1, 1)

#show the position values
df['pos_clus'].values

#Plotting the cluster
plt.figure(figsize=(30,15))
ax1 = plt.subplot(2,3,1)
plt.scatter(norm_movements[:, 0],norm_movements[:, 2],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,0],model.cluster_centers_[:, 2], s = 200, c = 'orange', label = 'Centroids')
plt.title('CL=F')
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.scatter(norm_movements[:, 1],norm_movements[:, 3],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,1],model.cluster_centers_[:, 3], s = 200, c = 'orange', label = 'Centroids')
plt.title('GC=F')
plt.legend()
plt.show()

#Apply silhouette scoring method for cluster valuation
kmeans_silhouette = silhouette_score(norm_movements, model.labels_).round(2)

kmeans_silhouette

#plot silhouette score
fig, ax = plt.subplots(1, figsize=(15,8))
for i in [2]:
    kmeans = KMeans(n_clusters=2, init='k-means++', random_state=0)
    kmeans_silhouette
    visualizer = SilhouetteVisualizer(kmeans, colors='yellowbrick')
    visualizer.fit(norm_movements)

#Without trading initialize Backtesiting trading strategy
Y=df['Adj Close']
Y.head()

df1=Y.shift(1)
df1.dropna

#without Trading Cost Return
df['returns_CL=F']= np.log(Y['CL=F']/df1['CL=F'])
df['returns_GC=F']= np.log(Y['GC=F']/df1['GC=F'])
df.head()

np.sign(df['returns_CL=F']).head()

df['returns_CL=F']= df['returns_CL=F'].fillna(0)
df['returns_CL=F']

df['direction_CL=F'] = np.sign(df['returns_CL=F']).astype(int)
df['direction_CL=F']

df['strat_clus_CL=F'] = df['pos_clus'] * df['returns_CL=F']
df[['returns_CL=F', 'strat_clus_CL=F']].sum().apply(np.exp)

(df['direction_CL=F'] == df['pos_clus']).value_counts()

#Company GC=F

np.sign(df['returns_GC=F']).head()

df['returns_GC=F']= df['returns_GC=F'].fillna(0)
df['returns_GC=F']

df['direction_GC=F'] = np.sign(df['returns_GC=F']).astype(int)
df['direction_GC=F']

df['strat_clus_GC=F'] = df['pos_clus'] * df['returns_GC=F']
df[['returns_GC=F', 'strat_clus_GC=F']].sum().apply(np.exp)

(df['direction_GC=F'] == df['pos_clus']).value_counts()

#Plot the chart without trading cost performence
plt.figure(figsize = (30,15)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:CL=F',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_CL=F'],color='red',label= 'return')
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_CL=F'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.title('Company:GC=F',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_GC=F'],color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_GC=F'],color='blue',label= 'strat_clus') 
plt.legend()
plt.show()

#with trading cost initialize Backtesiting trading strategy
Z= df['Adj Close']+100
Z

df2=Z.shift(1)
df2.dropna

#with Trading Cost Return
df['returns_CL=F_T']= np.log(Z['CL=F']/df2['CL=F'])
df['returns_GC=F_T']= np.log(Z['GC=F']/df2['GC=F'])
df.head()

#Comapany GOOG with trading Cost
np.sign(df['returns_CL=F_T']).head()

df['returns_CL=F_T']= df['returns_CL=F_T'].fillna(0)
df['returns_CL=F_T']

df['direction_CL=F_T'] = np.sign(df['returns_CL=F_T']).astype(int)
df['direction_CL=F_T']

df['strat_clus_CL=F_T'] = df['pos_clus'] * df['returns_CL=F_T']
df[['returns_CL=F_T', 'strat_clus_CL=F_T']].sum().apply(np.exp)

(df['direction_CL=F_T'] == df['pos_clus']).value_counts()

#Company AIG with trading cost
np.sign(df['returns_GC=F_T']).head()

df['returns_GC=F_T']= df['returns_GC=F_T'].fillna(0)
df['returns_GC=F_T']

df['direction_GC=F_T'] = np.sign(df['returns_GC=F_T']).astype(int)
df['direction_GC=F_T']

df['strat_clus_GC=F_T'] = df['pos_clus'] * df['returns_GC=F_T']
df[['returns_GC=F_T', 'strat_clus_GC=F_T']].sum().apply(np.exp)

(df['direction_GC=F_T'] == df['pos_clus']).value_counts()

#Plot the chart without trading cost performence
plt.figure(figsize = (30,15)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:CL=F_Trading',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_CL=F_T'],color='red',label= 'return')
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_CL=F_T'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.title('Company:GC=F_Trading',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_GC=F_T'],color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_GC=F_T'],color='blue',label= 'strat_clus') 
plt.legend()
plt.show()

