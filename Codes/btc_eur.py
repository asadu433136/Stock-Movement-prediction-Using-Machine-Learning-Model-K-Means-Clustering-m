# -*- coding: utf-8 -*-
"""BTC-EUR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OVv40q12IDiagVkLBsTLdPi_HNanPmYM
"""

#Import Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as web
from sklearn.cluster import KMeans
import matplotlib.cm as cm
from sklearn.metrics import silhouette_score
from yellowbrick.cluster import SilhouetteVisualizer
from sklearn.metrics import adjusted_rand_score
from sklearn.pipeline import make_pipeline

#import Companies name with tickers
companies_dict = {'Bitcoin EUR':'BTC-EUR'}
#Get the Dataset from Yahoo
data_source = 'yahoo' # Source of data is yahoo finance.
start_date = '2019' 
end_date = '2021'
df = web.DataReader(list(companies_dict.values()),
 data_source,start_date,end_date)
df.tail()

#identifying that is there any null value in dataset.
df.isnull().values.any()

#takes a variable (X) with open and close 
X=df[['Open','Close']]
X

#numpy array of transpose of df
stock_open = np.array(df['Open']).T # stock_open is numpy array of transpose of df['Open']
stock_close = np.array(df['Close']).T # stock_close is numpy array of transpose of df['Close']

#Movement
movements = stock_close-stock_open
movements.shape

#Plot the chart of Movement
plt.figure(figsize = (30,15)) 
ax1 = plt.subplot(2,3,1)
plt.title('BTC-EUR',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[0])

#Calculate sum of movement
sum_of_movement = np.sum(movements,1)

#Print the Changes of three companies
for i in range(len(companies_dict)):
 print('company:{}, Change:{}'.format(df['Open'].columns[i],sum_of_movement[i]))

#plot graph open and close 
plt.figure(figsize = (40,20)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:BTC-EUR',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['BTC-EUR'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['BTC-EUR'],color='blue',label = 'Close') # Closing prices are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})

#normalizer
from sklearn.preprocessing import Normalizer
normalizer = Normalizer() # Define a Normalizer
norm_movements = normalizer.fit_transform(X) # Fit and transform

#Print Normalizer range and mean values
print(norm_movements.min())
print(norm_movements.max())
print(norm_movements.mean())

#Plot the chart of Movement after normalize.
plt.figure(figsize = (10,8)) 
plt.title('BTC-EUR',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(norm_movements[1])

#Create KMeans algorithm 
model= KMeans(init = "k-means++", n_clusters =2, n_init = 12,max_iter=1000)
model.fit(norm_movements)

#Create position in dataframe and predict the normalize movements
df['pos_clus'] = model.predict(norm_movements)

#searching in position which point have 1 and -1
df['pos_clus'] = np.where(df['pos_clus'] == 1,-1, 1)
df['pos_clus']

#Plotting the cluster
plt.figure(figsize=(10, 6))
plt.scatter(norm_movements[:,0], norm_movements[:,1],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:, 0], model.cluster_centers_[:, 1], s = 200, c = 'orange', label = 'Centroids')
plt.title('BTC-EUR')
plt.legend()
plt.show()

#Apply silhouette scoring method for cluster valuation
kmeans_silhouette = silhouette_score(norm_movements, model.labels_).round(2)

kmeans_silhouette

#plot silhouette score
fig, ax = plt.subplots(1, figsize=(15,8))
for i in [2]:
    kmeans = KMeans(n_clusters=2, init='k-means++', random_state=0)
    kmeans_silhouette
    visualizer = SilhouetteVisualizer(kmeans, colors='yellowbrick')
    visualizer.fit(norm_movements)

#Without trading Cost initialize Backtesiting trading strategy
Y=df['Adj Close']
Y

df1=Y.shift(1)
df1.dropna

#without Trading Cost Return
df['returns_BTC-EUR']= np.log(Y['BTC-EUR']/df1['BTC-EUR'])
df.head()

np.sign(df['returns_BTC-EUR']).head()

df['returns_BTC-EUR']= df['returns_BTC-EUR'].fillna(0)
df['returns_BTC-EUR']

df['direction_BTC-EUR'] = np.sign(df['returns_BTC-EUR']).astype(int)
df['direction_BTC-EUR']

df['strat_clus_BTC-EUR'] = df['pos_clus'] * df['returns_BTC-EUR']

df[['returns_BTC-EUR', 'strat_clus_BTC-EUR']].sum().apply(np.exp)

(df['direction_BTC-EUR'] == df['pos_clus']).value_counts()

#Plot the chart without trading cost performence
plt.figure(figsize = (30,15)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:BTC-EUR',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_BTC-EUR'], color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_BTC-EUR'],color='blue',label= 'strat_clus') 
plt.legend()

#with trading cost initialize Backtesiting trading strategy
Z= df['Adj Close'] +1000
Z

df2=Z.shift(1)
df2.dropna

df['returns_BTC-EUR_T']= np.log(Z['BTC-EUR']/df2['BTC-EUR'])
df.head()

np.sign(df['returns_BTC-EUR_T']).head()

df['returns_BTC-EUR_T']= df['returns_BTC-EUR_T'].fillna(0)
df['returns_BTC-EUR_T']

df['direction_BTC-EUR_T'] = np.sign(df['returns_BTC-EUR_T']).astype(int)
df['direction_BTC-EUR_T']

df['strat_clus_BTC-EUR_T'] = df['pos_clus'] * df['returns_BTC-EUR_T']
df[['returns_BTC-EUR_T', 'strat_clus_BTC-EUR_T']].sum().apply(np.exp)

(df['direction_BTC-EUR_T'] == df['pos_clus']).value_counts()

#Plot the chart with trading cost performence
plt.figure(figsize = (40,20)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:BTC-EUR_TRADING',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_BTC-EUR_T'], color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_BTC-EUR_T'],color='blue',label= 'strat_clus') 
plt.legend()

