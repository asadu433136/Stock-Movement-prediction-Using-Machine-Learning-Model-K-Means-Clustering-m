# -*- coding: utf-8 -*-
"""LargeCap Europe (F).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rGBMmf4fqXnnwUZtcSz5TBkL2Qyb2ghz
"""

# Importing the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as web
import datetime
from sklearn.cluster import KMeans
import matplotlib.cm as cm
from sklearn.metrics import silhouette_score
from yellowbrick.cluster import SilhouetteVisualizer
from sklearn.metrics import adjusted_rand_score
from sklearn.pipeline import make_pipeline

#import Companies name with tickers
companies_dict = {'SAP SE':'SAP',
    'Allianz SE ':'ALV.DE',
    'Koninklijke Ahold Delhaize N.V.':'AD.AS'}

#Get the Dataset from Yahoo
data_source = 'yahoo' # Source of data is yahoo finance.
start_date = '2017' 
end_date = '2021'
df = web.DataReader(list(companies_dict.values()),
 data_source,start_date,end_date)
df.mean()
df = df.fillna(df.mean())
df.tail()

df.isnull().values.any()

df.shape

#Select the Featrue to ideentify Cluster
X=df[['Open','Close']]
X

#numpy array of transpose of df
stock_open = np.array(df['Open']).T # stock_open is numpy array of transpose of df['Open']
stock_close = np.array(df['Close']).T # stock_close is numpy array of transpose of df['Close']

#Movement
movements = stock_close-stock_open
movements.shape

#Plot the chart of Movement
plt.figure(figsize = (30,15)) 
ax1 = plt.subplot(2,3,1)
plt.title('SAP',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[0]) 
plt.subplot(2,3,2,sharey = ax1)
plt.title('ALV.DE',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[1]) 
plt.subplot(2,3,3,sharey = ax1)
plt.title('AD.AS',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[2])

sum_of_movement = np.sum(movements,1)

#Print the Changes of three companies
for i in range(len(companies_dict)):
 print('company:{}, Change:{}'.format(df['Open'].columns[i],sum_of_movement[i]))

#plot graph open and close 
plt.figure(figsize = (40,20)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:SAP',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['SAP'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['SAP'],color='blue',label = 'Close') # Closing prices are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})
ax1 = plt.subplot(2,3,2)
plt.title('Company:ALV.DE',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['ALV.DE'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['ALV.DE'],color='blue',label = 'Close') # Closing prices are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})
ax1 = plt.subplot(2,3,3)
plt.title('Company:AD.AS',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['AD.AS'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['AD.AS'],color='blue',label = 'Close') # Closing prices  are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})

#normalizer
from sklearn.preprocessing import Normalizer
normalizer = Normalizer() # Define a Normalizer
norm_movements = normalizer.fit_transform(X) # Fit and transform

#Print Normalizer range and mean values
print(norm_movements.min())
print(norm_movements.max())
print(norm_movements.mean())

#Plot the chart of Movement after normalize.
plt.figure(figsize = (30,15)) 
ax1 = plt.subplot(2,3,1)
plt.title('SAP',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(norm_movements [0]) 
plt.subplot(2,3,2,sharey = ax1)
plt.title('ALV.DE',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(norm_movements [1]) 
plt.subplot(2,3,3,sharey = ax1)
plt.title('AD.AS',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(norm_movements [2])

#Create KMeans algorithm 
model= KMeans(init = "k-means++", n_clusters = 2, n_init = 12,max_iter=1000)
model.fit(norm_movements)

df['pos_clus'] = model.predict(norm_movements)

df['pos_clus'] = np.where(df['pos_clus'] == 1,-1, 1)

df['pos_clus'].values

plt.figure(figsize=(30,15))
ax1 = plt.subplot(2,3,1)
plt.scatter(norm_movements[:, 0], norm_movements[:, 3],
c=df['pos_clus'], cmap='coolwarm',)
plt.scatter(model.cluster_centers_[:,0],model.cluster_centers_[:, 3], s = 200, c = 'orange', label = 'Centroids')
plt.title('SAP')
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.scatter(norm_movements[:, 1],norm_movements[:, 4],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,1],model.cluster_centers_[:, 4], s = 200, c = 'orange', label = 'Centroids')
plt.title('ALV.DE')
plt.legend()
ax1 = plt.subplot(2,3,3)
plt.scatter(norm_movements[:, 2],norm_movements[:, 5],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,2],model.cluster_centers_[:, 5], s = 200, c = 'orange', label = 'Centroids')
plt.title('AD.AS')
plt.legend()
plt.show()

#silhouette scoring 
kmeans_silhouette = silhouette_score(norm_movements, model.labels_).round(2)

kmeans_silhouette

fig, ax = plt.subplots(1, figsize=(15,8))
for i in [1,2]:
    kmeans = KMeans(n_clusters=2, init='k-means++', random_state=0)
    kmeans_silhouette
    visualizer = SilhouetteVisualizer(kmeans, colors='yellowbrick')
    visualizer.fit(norm_movements)

#Without trading
Y= df['Adj Close']
Y.head()

df1=Y.shift(1)
df1.dropna

#without Trading Cost Return
df['returns_SAP']= np.log(Y['SAP']/df1['SAP'])
df['returns_ALV.DE']= np.log(Y['ALV.DE']/df1['ALV.DE'])
df['returns_AD.AS']= np.log(Y['AD.AS']/df1['AD.AS'])
df.head()

#Company SAP
np.sign(df['returns_SAP']).head()

df['returns_SAP']= df['returns_SAP'].fillna(0)
df['returns_SAP']

df['direction_SAP'] = np.sign(df['returns_SAP']).astype(int)
df['direction_SAP']

df['strat_clus_SAP'] = df['pos_clus'] * df['returns_SAP']

df[['returns_SAP', 'strat_clus_SAP']].sum().apply(np.exp)

(df['direction_SAP'] == df['pos_clus']).value_counts()

#COMPANY ALV.DE
np.sign(df['returns_ALV.DE']).head()

df['returns_ALV.DE']= df['returns_ALV.DE'].fillna(0)
df['returns_ALV.DE']

df['direction_ALV.DE'] = np.sign(df['returns_ALV.DE']).astype(int)
df['direction_ALV.DE']

df['strat_clus_ALV.DE'] = df['pos_clus'] * df['returns_ALV.DE']

df[['returns_ALV.DE', 'strat_clus_ALV.DE']].sum().apply(np.exp)

(df['direction_ALV.DE'] == df['pos_clus']).value_counts()

#Comapny AD.AS
np.sign(df['returns_AD.AS']).head()

df['returns_AD.AS']= df['returns_AD.AS'].fillna(0)
df['returns_AD.AS']

df['direction_AD.AS'] = np.sign(df['returns_AD.AS']).astype(int)
df['direction_AD.AS']

df['strat_clus_AD.AS'] = df['pos_clus'] * df['returns_AD.AS']

df[['returns_AD.AS', 'strat_clus_AD.AS']].sum().apply(np.exp)

(df['direction_AD.AS'] == df['pos_clus']).value_counts()

plt.figure(figsize = (30,15)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:SAP',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:]['returns_SAP'], color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:]['strat_clus_SAP'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.title('Company:ALV.DE',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:]['returns_ALV.DE'],color='red',label= 'return')
plt.plot(df.cumsum().apply(np.exp).iloc[0:]['strat_clus_ALV.DE'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,3)
plt.title('Company:AD.AS',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:]['returns_AD.AS'],color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:]['strat_clus_AD.AS'],color='blue',label= 'strat_clus') 
plt.legend()
plt.show()

#with trading cost
Z= df['Adj Close']+100
Z

df2=Z.shift(1)
df2.dropna

#with Trading Cost Return
df['returns_SAP_T']= np.log(Z['SAP']/df2['SAP'])
df['returns_ALV.DE_T']= np.log(Z['ALV.DE']/df2['ALV.DE'])
df['returns_AD.AS_T']= np.log(Z['AD.AS']/df2['AD.AS'])
df.head()

#company SAP
np.sign(df['returns_SAP_T']).head()

df['returns_SAP_T']= df['returns_SAP_T'].fillna(0)
df['returns_SAP_T']

df['direction_SAP_T'] = np.sign(df['returns_SAP_T']).astype(int)
df['direction_SAP_T']

df['strat_clus_SAP_T'] = df['pos_clus'] * df['returns_SAP_T']

df[['returns_SAP_T', 'strat_clus_SAP_T']].sum().apply(np.exp)

(df['direction_SAP_T'] == df['pos_clus']).value_counts()

#Company ALV.DE with trading cost
np.sign(df['returns_ALV.DE_T']).head()

df['returns_ALV.DE_T']= df['returns_ALV.DE_T'].fillna(0)
df['returns_ALV.DE_T']

df['direction_ALV.DE_T'] = np.sign(df['returns_ALV.DE_T']).astype(int)
df['direction_ALV.DE_T']

df['strat_clus_ALV.DE_T'] = df['pos_clus'] * df['returns_ALV.DE_T']
df[['returns_ALV.DE_T', 'strat_clus_ALV.DE_T']].sum().apply(np.exp)

(df['direction_ALV.DE_T'] == df['pos_clus']).value_counts()

#Comapny AD.AS With Trading 
np.sign(df['returns_AD.AS_T']).head()

df['returns_AD.AS_T']= df['returns_AD.AS_T'].fillna(0)
df['returns_AD.AS_T']

df['direction_AD.AS_T'] = np.sign(df['returns_AD.AS_T']).astype(int)
df['direction_AD.AS_T']

df['strat_clus_AD.AS_T'] = df['pos_clus'] * df['returns_AD.AS_T']
df[['returns_AD.AS_T', 'strat_clus_AD.AS_T']].sum().apply(np.exp)

(df['direction_AD.AS_T'] == df['pos_clus']).value_counts()

plt.figure(figsize = (40,20)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:SAP_Trading',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_SAP_T'], color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_SAP_T'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.title('Company:ALV.DE_Trading',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_ALV.DE_T'],color='red',label= 'return')
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_ALV.DE_T'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,3)
plt.title('Company:AD.AS_Trading',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_AD.AS_T'],color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_AD.AS_T'],color='blue',label= 'strat_clus') 
plt.legend()
plt.show()

