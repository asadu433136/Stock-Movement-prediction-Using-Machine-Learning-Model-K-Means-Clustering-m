# -*- coding: utf-8 -*-
"""LargeCap USA (F).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18EH21MG7mKgzXPm-tYIkXEt5ih2ajrdG
"""

# Importing the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as web
import datetime
from sklearn.cluster import KMeans
import matplotlib.cm as cm
from sklearn.metrics import silhouette_score
from yellowbrick.cluster import SilhouetteVisualizer
from sklearn.pipeline import make_pipeline

#import Companies name with tickers
companies_dict = {'Alphabet Inc.':'GOOG',
    'American International Group.Inc':'AIG',
    'Walmart Inc.':'WMT'}

#Get the Dataset from Yahoo
data_source = 'yahoo' # Source of data is yahoo finance.
start_date = '2016' 
end_date = '2021'
df = web.DataReader(list(companies_dict.values()),
 data_source,start_date,end_date)
df.tail()

#Select the Featrue to ideentify Cluster
X=df[['Open','Close']]
X

#numpy array of transpose of df
stock_open = np.array(df['Open']).T # stock_open is numpy array of transpose of df['Open']
stock_close = np.array(df['Close']).T # stock_close is numpy array of transpose of df['Close']

#Movement
movements = stock_close-stock_open
movements.shape

#Plot the chart of Movement
plt.figure(figsize = (30,15)) 
ax1 = plt.subplot(2,3,1)
plt.title('GOOG',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[0]) 
plt.subplot(2,3,2,sharey = ax1)
plt.title('AIG',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[1]) 
plt.subplot(2,3,3,sharey = ax1)
plt.title('WMT',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(movements[2])

#sum of the movement checking
sum_of_movement = np.sum(movements,1)
sum_of_movement

#Print the Changes of three companies
for i in range(len(companies_dict)):
 print('company:{}, Change:{}'.format(df['Open'].columns[i],sum_of_movement[i]))

#plot graph open and close 
plt.figure(figsize = (40,20)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:GOOG',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['GOOG'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['GOOG'],color='blue',label = 'Close') # Closing prices are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})
ax1 = plt.subplot(2,3,2)
plt.title('Company:AIG',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['AIG'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['AIG'],color='blue',label = 'Close') # Closing prices are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})
ax1 = plt.subplot(2,3,3)
plt.title('Company:WMT',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Price',fontsize = 20)
plt.plot(df.iloc[0:]['Open']['WMT'],color='red',label = 'Open') # Opening prices are plotted against date
plt.plot(df.iloc[0:]['Close']['WMT'],color='blue',label = 'Close') # Closing prices  are plotted against date
plt.legend(loc='upper left', frameon=False,framealpha=1,prop={'size': 22})

#normalizer
from sklearn.preprocessing import Normalizer
normalizer = Normalizer() # Define a Normalizer
normalize_movements= normalizer.fit_transform(X) # Fit and transform

#Print Normalizer range and mean values
print(normalize_movements.min())
print(normalize_movements.max())
print(normalize_movements.mean())

#Plot the chart of Movement after normalize.
plt.figure(figsize = (30,15)) 
ax1 = plt.subplot(2,3,1)
plt.title('GOOG',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(normalize_movements [0]) 
plt.subplot(2,3,2,sharey = ax1)
plt.title('AIG',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(normalize_movements [1]) 
plt.subplot(2,3,3,sharey = ax1)
plt.title('WMT',fontsize = 20)
plt.xticks(fontsize = 18)
plt.yticks(fontsize = 20)
plt.xlabel('Date',fontsize = 20)
plt.ylabel('Movement',fontsize = 20)
plt.plot(normalize_movements [2])

#Create KMeans algorithm 
model= KMeans(init = "k-means++", n_clusters = 2, n_init = 12,max_iter=300)
model.fit(normalize_movements)

#Create position in dataframe and predict the normalize movements
df['pos_clus'] = model.predict(normalize_movements)

df['pos_clus']

#searching in position which point have 1 and -1
df['pos_clus'] = np.where(df['pos_clus'] == 1,-1, 1)

#show the position values
df['pos_clus'].values

#Plotting the cluster
plt.figure(figsize=(10, 6))
plt.scatter(normalize_movements[:, 0], normalize_movements[:, 3],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,0],model.cluster_centers_[:, 3], s = 200, c = 'orange', label = 'Centroids')
plt.title('GOOG')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(normalize_movements[:, 1],normalize_movements[:, 4],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,1],model.cluster_centers_[:, 4], s = 200, c = 'orange', label = 'Centroids')
plt.title('AIG')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(normalize_movements[:, 2],normalize_movements[:, 5],
c=df['pos_clus'], cmap='coolwarm')
plt.scatter(model.cluster_centers_[:,2],model.cluster_centers_[:, 5], s = 200, c = 'orange', label = 'Centroids')
plt.title('WMT')
plt.legend()
plt.show()

#Silhouette score checking
kmeans_silhouette = silhouette_score(normalize_movements, model.labels_).round(2)

kmeans_silhouette

#plot silhouette score
fig, ax = plt.subplots(1, figsize=(15,8))
for i in [2]:
    model= KMeans(n_clusters=2, init='k-means++', random_state=0)
    kmeans_silhouette
    visualizer = SilhouetteVisualizer(model, colors='yellowbrick')
    visualizer.fit(normalize_movements)

# Without Trading Cost initialize Backtesiting trading strategy
Y=df['Adj Close']
Y

df1=Y.shift(1)
df1.dropna

#without Trading Cost Return
df['returns_GOOG']= np.log(Y['GOOG']/df1['GOOG'])
df['returns_AIG']= np.log(Y['AIG']/df1['AIG'])
df['returns_WMT']= np.log(Y['WMT']/df1['WMT'])
df.head()

np.sign(df['returns_GOOG']).head()

df['returns_GOOG']= df['returns_GOOG'].fillna(0)
df['returns_GOOG']

df['direction_GOOG'] = np.sign(df['returns_GOOG']).astype(int)
df['direction_GOOG']

df['strat_clus_GOOG'] = df['pos_clus'] * df['returns_GOOG']

df[['returns_GOOG', 'strat_clus_GOOG']].sum().apply(np.exp)

(df['direction_GOOG'] == df['pos_clus']).value_counts()

#Company AIG
np.sign(df['returns_AIG']).head()

df['returns_AIG']= df['returns_AIG'].fillna(0)
df['returns_AIG']

df['direction_AIG'] = np.sign(df['returns_AIG']).astype(int)
df['direction_AIG']

df['strat_clus_AIG'] = df['pos_clus'] * df['returns_AIG']
df[['returns_AIG', 'strat_clus_AIG']].sum().apply(np.exp)

(df['direction_AIG'] == df['pos_clus']).value_counts()

#Comapny WMT
np.sign(df['returns_WMT']).head()

df['returns_WMT']= df['returns_WMT'].fillna(0)
df['returns_WMT']

df['direction_WMT'] = np.sign(df['returns_WMT']).astype(int)
df['direction_WMT']

df['strat_clus_WMT'] = df['pos_clus'] * df['returns_WMT']
df[['returns_WMT', 'strat_clus_WMT']].sum().apply(np.exp)

(df['direction_WMT'] == df['pos_clus']).value_counts()

#plot without trading cost 
plt.figure(figsize = (30,15)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:GOOG',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_GOOG'], color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_GOOG'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.title('Company:AIG',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_AIG'],color='red',label= 'return')
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_AIG'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,3)
plt.title('Company:WMT',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_WMT'],color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_WMT'],color='blue',label= 'strat_clus') 
plt.legend()
plt.show()

#with trading cost
Z= df['Adj Close'] +100
Z

df2=Z.shift(1)
df2.dropna

#with Trading Cost Return
df['returns_GOOG_T']= np.log(Z['GOOG']/df2['GOOG'])
df['returns_AIG_T']= np.log(Z['AIG']/df2['AIG'])
df['returns_WMT_T']= np.log(Z['WMT']/df2['WMT'])
df.head()

#Comapany GOOG with trading Cost
np.sign(df['returns_GOOG_T']).head()

df['returns_GOOG_T']= df['returns_GOOG_T'].fillna(0)
df['returns_GOOG_T']

df['direction_GOOG_T'] = np.sign(df['returns_GOOG_T']).astype(int)
df['direction_GOOG_T']

df['strat_clus_GOOG_T'] = df['pos_clus'] * df['returns_GOOG_T']
df[['returns_GOOG_T', 'strat_clus_GOOG_T']].sum().apply(np.exp)

(df['direction_GOOG_T'] == df['pos_clus']).value_counts()

#Company AIG with trading cost
np.sign(df['returns_AIG_T']).head()

df['returns_AIG_T']= df['returns_AIG_T'].fillna(0)
df['returns_AIG_T']

df['direction_AIG_T'] = np.sign(df['returns_AIG_T']).astype(int)
df['direction_AIG_T']

df['strat_clus_AIG_T'] = df['pos_clus'] * df['returns_AIG_T']
df[['returns_AIG_T', 'strat_clus_AIG_T']].sum().apply(np.exp)

(df['direction_AIG_T'] == df['pos_clus']).value_counts()

#Comapny WMT With Trading 
np.sign(df['returns_WMT_T']).head()

df['returns_WMT_T']= df['returns_WMT_T'].fillna(0)
df['returns_WMT_T']

df['direction_WMT_T'] = np.sign(df['returns_WMT_T']).astype(int)
df['direction_WMT_T']

df['strat_clus_WMT_T'] = df['pos_clus'] * df['returns_WMT_T']
df[['returns_WMT_T', 'strat_clus_WMT_T']].sum().apply(np.exp)

(df['direction_WMT_T'] == df['pos_clus']).value_counts()

#plot the chart with trading cost
plt.figure(figsize = (40,20)) # Adjusting figure size
ax1 = plt.subplot(2,3,1)
plt.title('Company:GOOG_TRADING',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_GOOG_T'], color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_GOOG_T'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,2)
plt.title('Company:AIG__TRADING',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_AIG_T'],color='red',label= 'return')
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_AIG_T'],color='blue',label= 'strat_clus') 
plt.legend()
ax1 = plt.subplot(2,3,3)
plt.title('Company:WMT__TRADING',fontsize = 20)
plt.xticks(fontsize = 10)
plt.yticks(fontsize = 20)
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['returns_WMT_T'],color='red',label= 'return') 
plt.plot(df.cumsum().apply(np.exp).iloc[0:1259]['strat_clus_WMT_T'],color='blue',label= 'strat_clus') 
plt.legend()
plt.show()

